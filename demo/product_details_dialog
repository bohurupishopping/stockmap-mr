import 'package:flutter/material.dart';
import 'package:intl/intl.dart' as intl;
import '../models/product_models.dart' show Product;
import '../models/stock_models.dart' hide Product;
import '../services/stock_service.dart';

class ProductDetailsDialog extends StatefulWidget {
  final Product product;

  const ProductDetailsDialog({super.key, required this.product});

  @override
  State<ProductDetailsDialog> createState() => _ProductDetailsDialogState();
}

class _ProductDetailsDialogState extends State<ProductDetailsDialog>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = true;
  String? _error;
  
  List<Transaction> _transactions = [];
  List<StockItem> _stockItems = [];
  List<Batch> _batches = [];
  int _totalGodownStock = 0;
  int _totalMrStock = 0;
  int _totalStock = 0;
  double _totalValue = 0.0;


  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadProductData();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadProductData() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      final summary = await StockService.getProductStockSummary(widget.product.id);
      
      setState(() {
        _transactions = summary['transactions'] as List<Transaction>;
        _stockItems = summary['stockItems'] as List<StockItem>;
        _batches = summary['batches'] as List<Batch>;
        _totalGodownStock = summary['totalGodownStock'] as int;
        _totalMrStock = summary['totalMrStock'] as int;
        _totalStock = summary['totalStock'] as int;
        _totalValue = summary['totalValue'] as double;

        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    const primaryColor = Color(0xFF4F46E5);
    
    return Dialog(
      backgroundColor: Colors.transparent,
      insetPadding: const EdgeInsets.all(16),
      child: Container(
        width: double.infinity,
        height: MediaQuery.of(context).size.height * 0.9,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.1),
              blurRadius: 20,
              offset: const Offset(0, 10),
            ),
          ],
        ),
        child: Column(
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(20),
              decoration: const BoxDecoration(
                color: primaryColor,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              widget.product.productName,
                              style: const TextStyle(
                                fontFamily: 'Poppins',
                                fontSize: 20,
                                fontWeight: FontWeight.w700,
                                color: Colors.white,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              'Code: ${widget.product.productCode}',
                              style: TextStyle(
                                fontFamily: 'Poppins',
                                fontSize: 14,
                                color: Colors.white.withValues(alpha: 0.9),
                              ),
                            ),
                            if (widget.product.genericName.isNotEmpty)
                              Text(
                                'Generic: ${widget.product.genericName}',
                                style: TextStyle(
                                  fontFamily: 'Poppins',
                                  fontSize: 12,
                                  color: Colors.white.withValues(alpha: 0.8),
                                ),
                              ),
                          ],
                        ),
                      ),
                      IconButton(
                        onPressed: () => Navigator.of(context).pop(),
                        icon: const Icon(
                          Icons.close_rounded,
                          color: Colors.white,
                          size: 28,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  // Stock Summary Cards
                  if (!_isLoading && _error == null)
                    Row(
                      children: [
                        Expanded(
                          child: _buildSummaryCard(
                            'Total Stock',
                            _totalStock.toString(),
                            Icons.inventory_2_rounded,
                            Colors.white,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: _buildSummaryCard(
                            'Godown',
                            _totalGodownStock.toString(),
                            Icons.warehouse_rounded,
                            Colors.white,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: _buildSummaryCard(
                            'MR Stock',
                            _totalMrStock.toString(),
                            Icons.local_shipping_rounded,
                            Colors.white,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: _buildSummaryCard(
                            'Value',
                            'â‚¹${intl.NumberFormat('#,##0').format(_totalValue)}',
                            Icons.currency_rupee_rounded,
                            Colors.white,
                          ),
                        ),
                      ],
                    ),
                ],
              ),
            ),
            
            // Tab Bar
            Container(
              color: Colors.grey.shade50,
              child: TabBar(
                controller: _tabController,
                labelColor: primaryColor,
                unselectedLabelColor: Colors.grey.shade600,
                indicatorColor: primaryColor,
                indicatorWeight: 3,
                labelStyle: const TextStyle(
                  fontFamily: 'Poppins',
                  fontWeight: FontWeight.w600,
                  fontSize: 14,
                ),
                unselectedLabelStyle: const TextStyle(
                  fontFamily: 'Poppins',
                  fontWeight: FontWeight.w500,
                  fontSize: 14,
                ),
                tabs: const [
                  Tab(
                    icon: Icon(Icons.receipt_long_rounded),
                    text: 'Transactions',
                  ),
                  Tab(
                    icon: Icon(Icons.inventory_rounded),
                    text: 'Current Stock',
                  ),
                  Tab(
                    icon: Icon(Icons.batch_prediction_rounded),
                    text: 'Batches',
                  ),
                ],
              ),
            ),
            
            // Tab Content
            Expanded(
              child: _isLoading
                  ? const Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          CircularProgressIndicator(),
                          SizedBox(height: 16),
                          Text(
                            'Loading product details...',
                            style: TextStyle(
                              fontFamily: 'Poppins',
                              color: Colors.grey,
                            ),
                          ),
                        ],
                      ),
                    )
                  : _error != null
                      ? Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.error_outline_rounded,
                                size: 64,
                                color: Colors.red.shade300,
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'Error loading data',
                                style: TextStyle(
                                  fontFamily: 'Poppins',
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.red.shade600,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                _error!,
                                style: TextStyle(
                                  fontFamily: 'Poppins',
                                  color: Colors.grey.shade600,
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(height: 16),
                              ElevatedButton(
                                onPressed: _loadProductData,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: primaryColor,
                                  foregroundColor: Colors.white,
                                ),
                                child: const Text('Retry'),
                              ),
                            ],
                          ),
                        )
                      : TabBarView(
                          controller: _tabController,
                          children: [
                            _buildTransactionsTab(),
                            _buildCurrentStockTab(),
                            _buildBatchesTab(),
                          ],
                        ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSummaryCard(String title, String value, IconData icon, Color textColor) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.15),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Colors.white.withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Icon(
            icon,
            color: textColor,
            size: 20,
          ),
          const SizedBox(height: 6),
          Text(
            value,
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: 14,
              fontWeight: FontWeight.w700,
              color: textColor,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: 10,
              color: textColor.withValues(alpha: 0.9),
            ),
            textAlign: TextAlign.center,
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }

  Widget _buildTransactionsTab() {
    if (_transactions.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.receipt_long_outlined,
              size: 64,
              color: Colors.grey,
            ),
            SizedBox(height: 16),
            Text(
              'No transactions found',
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _transactions.length,
      itemBuilder: (context, index) {
        final transaction = _transactions[index];
        return _buildTransactionCard(transaction);
      },
    );
  }

  Widget _buildTransactionCard(Transaction transaction) {
    final isIncoming = _isIncomingTransaction(transaction.transactionType);
    final color = isIncoming ? Colors.green : Colors.red;
    final icon = isIncoming ? Icons.add_circle_outline : Icons.remove_circle_outline;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: color.withValues(alpha: 0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                icon,
                color: color,
                size: 20,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _getTransactionTypeDisplay(transaction.transactionType),
                  style: TextStyle(
                    fontFamily: 'Poppins',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: color,
                  ),
                ),
              ),
              Text(
                '${isIncoming ? '+' : '-'}${transaction.quantityStrips.abs()} strips',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 14,
                  fontWeight: FontWeight.w700,
                  color: color,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(
                Icons.calendar_today_rounded,
                size: 14,
                color: Colors.grey.shade600,
              ),
              const SizedBox(width: 4),
              Text(
                intl.DateFormat('MMM dd, yyyy').format(DateTime.parse(transaction.transactionDate)),
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  color: Colors.grey.shade600,
                ),
              ),
              const SizedBox(width: 16),
              Icon(
                Icons.currency_rupee_rounded,
                size: 14,
                color: Colors.grey.shade600,
              ),
              const SizedBox(width: 4),
              Text(
                '${transaction.costPerStripAtTransaction.toStringAsFixed(2)}/strip',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  color: Colors.grey.shade600,
                ),
              ),
            ],
          ),
          if (transaction.locationTypeSource != null || transaction.locationTypeDestination != null)
            Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Row(
                children: [
                  Icon(
                    Icons.location_on_rounded,
                    size: 14,
                    color: Colors.grey.shade600,
                  ),
                  const SizedBox(width: 4),
                  Expanded(
                    child: Text(
                      _getLocationDisplay(transaction),
                      style: TextStyle(
                        fontFamily: 'Poppins',
                        fontSize: 12,
                        color: Colors.grey.shade600,
                      ),
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildCurrentStockTab() {
    if (_stockItems.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.inventory_outlined,
              size: 64,
              color: Colors.grey,
            ),
            SizedBox(height: 16),
            Text(
              'No current stock found',
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _stockItems.length,
      itemBuilder: (context, index) {
        final stockItem = _stockItems[index];
        return _buildStockCard(stockItem);
      },
    );
  }

  Widget _buildStockCard(StockItem stockItem) {
    final isLowStock = _isLowStock(stockItem);
    final isExpiringSoon = _isExpiringSoon(stockItem.expiryDate);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isLowStock ? Colors.red.withValues(alpha: 0.3) : Colors.grey.withValues(alpha: 0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                stockItem.locationType == 'GODOWN' 
                    ? Icons.warehouse_rounded 
                    : Icons.local_shipping_rounded,
                color: const Color(0xFF4F46E5),
                size: 20,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _getLocationDisplay2(stockItem),
                  style: const TextStyle(
                    fontFamily: 'Poppins',
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF4F46E5),
                  ),
                ),
              ),
              Text(
                '${stockItem.currentQuantityStrips} strips',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 14,
                  fontWeight: FontWeight.w700,
                  color: isLowStock ? Colors.red : Colors.green,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Text(
                'Batch: ${stockItem.batchNumber}',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  color: Colors.grey.shade600,
                ),
              ),
              const SizedBox(width: 16),
              Text(
                'Expiry: ${intl.DateFormat('MMM dd, yyyy').format(stockItem.expiryDate)}',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  color: isExpiringSoon ? Colors.orange : Colors.grey.shade600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Text(
                'Value: â‚¹${intl.NumberFormat('#,##0.00').format(stockItem.totalValue)}',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: Colors.grey.shade700,
                ),
              ),
              const SizedBox(width: 16),
              Text(
                'â‚¹${stockItem.costPerStrip.toStringAsFixed(2)}/strip',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  color: Colors.grey.shade600,
                ),
              ),
            ],
          ),
          if (isLowStock || isExpiringSoon)
            Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Row(
                children: [
                  if (isLowStock)
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.red.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Text(
                        'Low Stock',
                        style: TextStyle(
                          fontFamily: 'Poppins',
                          fontSize: 10,
                          fontWeight: FontWeight.w600,
                          color: Colors.red,
                        ),
                      ),
                    ),
                  if (isLowStock && isExpiringSoon) const SizedBox(width: 8),
                  if (isExpiringSoon)
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.orange.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Text(
                        'Expiring Soon',
                        style: TextStyle(
                          fontFamily: 'Poppins',
                          fontSize: 10,
                          fontWeight: FontWeight.w600,
                          color: Colors.orange,
                        ),
                      ),
                    ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildBatchesTab() {
    if (_batches.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.batch_prediction_outlined,
              size: 64,
              color: Colors.grey,
            ),
            SizedBox(height: 16),
            Text(
              'No batches found',
              style: TextStyle(
                fontFamily: 'Poppins',
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _batches.length,
      itemBuilder: (context, index) {
        final batch = _batches[index];
        return _buildBatchCard(batch);
      },
    );
  }

  Widget _buildBatchCard(Batch batch) {
    final isExpiringSoon = _isExpiringSoon(batch.expiryDate);
    final isExpired = batch.expiryDate.isBefore(DateTime.now());
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isExpired 
              ? Colors.red.withValues(alpha: 0.3) 
              : isExpiringSoon 
                  ? Colors.orange.withValues(alpha: 0.3) 
                  : Colors.grey.withValues(alpha: 0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.batch_prediction_rounded,
                color: const Color(0xFF4F46E5),
                size: 20,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  batch.batchNumber,
                  style: const TextStyle(
                    fontFamily: 'Poppins',
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF4F46E5),
                  ),
                ),
              ),
              if (isExpired || isExpiringSoon)
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: (isExpired ? Colors.red : Colors.orange).withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Text(
                    isExpired ? 'Expired' : 'Expiring Soon',
                    style: TextStyle(
                      fontFamily: 'Poppins',
                      fontSize: 10,
                      fontWeight: FontWeight.w600,
                      color: isExpired ? Colors.red : Colors.orange,
                    ),
                  ),
                ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(
                Icons.calendar_today_rounded,
                size: 14,
                color: Colors.grey.shade600,
              ),
              const SizedBox(width: 4),
              Text(
                'Expiry: ${intl.DateFormat('MMM dd, yyyy').format(batch.expiryDate)}',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontSize: 12,
                  color: isExpired ? Colors.red : isExpiringSoon ? Colors.orange : Colors.grey.shade600,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  bool _isIncomingTransaction(String transactionType) {
    return [
      'STOCK_IN_GODOWN',
      'RETURN_TO_GODOWN',
      'OPENING_STOCK_GODOWN',
      'OPENING_STOCK_MR'
    ].contains(transactionType) || 
    (transactionType == 'DISPATCH_TO_MR');
  }

  String _getTransactionTypeDisplay(String transactionType) {
    switch (transactionType) {
      case 'STOCK_IN_GODOWN':
        return 'Stock In (Godown)';
      case 'DISPATCH_TO_MR':
        return 'Dispatch to MR';
      case 'SALE_DIRECT_GODOWN':
        return 'Direct Sale (Godown)';
      case 'SALE_BY_MR':
        return 'Sale by MR';
      case 'RETURN_TO_GODOWN':
        return 'Return to Godown';
      case 'ADJUST_DAMAGE_GODOWN':
        return 'Damage Adjustment (Godown)';
      case 'ADJUST_DAMAGE_MR':
        return 'Damage Adjustment (MR)';
      case 'ADJUST_LOSS_GODOWN':
        return 'Loss Adjustment (Godown)';
      case 'ADJUST_LOSS_MR':
        return 'Loss Adjustment (MR)';
      case 'ADJUST_EXPIRED_GODOWN':
        return 'Expired Adjustment (Godown)';
      case 'ADJUST_EXPIRED_MR':
        return 'Expired Adjustment (MR)';
      case 'OPENING_STOCK_GODOWN':
        return 'Opening Stock (Godown)';
      case 'OPENING_STOCK_MR':
        return 'Opening Stock (MR)';
      case 'REPLACEMENT_FROM_GODOWN':
        return 'Replacement from Godown';
      case 'REPLACEMENT_FROM_MR':
        return 'Replacement from MR';
      default:
        return transactionType.replaceAll('_', ' ').toLowerCase().split(' ').map((word) => word[0].toUpperCase() + word.substring(1)).join(' ');
    }
  }

  String _getLocationDisplay(Transaction transaction) {
    if (transaction.locationTypeSource != null && transaction.locationTypeDestination != null) {
      final source = transaction.locationTypeSource == 'GODOWN' 
          ? 'Godown' 
          : '${transaction.locationTypeSource} ${transaction.locationIdSource ?? ''}';
      final destination = transaction.locationTypeDestination == 'GODOWN' 
          ? 'Godown' 
          : '${transaction.locationTypeDestination} ${transaction.locationIdDestination ?? ''}';
      return '$source â†’ $destination';
    } else if (transaction.locationTypeSource != null) {
      return transaction.locationTypeSource == 'GODOWN' 
          ? 'From Godown' 
          : 'From ${transaction.locationTypeSource} ${transaction.locationIdSource ?? ''}';
    } else if (transaction.locationTypeDestination != null) {
      return transaction.locationTypeDestination == 'GODOWN' 
          ? 'To Godown' 
          : 'To ${transaction.locationTypeDestination} ${transaction.locationIdDestination ?? ''}';
    }
    return '';
  }

  String _getLocationDisplay2(StockItem stockItem) {
    if (stockItem.locationType == 'GODOWN') {
      return 'Godown';
    } else if (stockItem.locationType == 'MR') {
      return 'MR ${stockItem.locationId}';
    }
    return stockItem.locationType;
  }

  bool _isLowStock(StockItem stockItem) {
    final minLevel = stockItem.locationType == 'GODOWN' 
        ? (stockItem.minStockLevelGodown ?? 0)
        : (stockItem.minStockLevelMr ?? 0);
    return stockItem.currentQuantityStrips <= minLevel;
  }

  bool _isExpiringSoon(DateTime expiryDate) {
    final thirtyDaysFromNow = DateTime.now().add(const Duration(days: 30));
    return expiryDate.isBefore(thirtyDaysFromNow) && expiryDate.isAfter(DateTime.now());
  }
}